/////////////////////////////////////////////////////////////
#pragma once
#ifndef SCIENCE_MATH_INTERPOL_COMMON_H_INCLUDED_
#define SCIENCE_MATH_INTERPOL_COMMON_H_INCLUDED_
#define DEBUG

#include <stdbool.h>

#include "type.h"
#include "extra_type.h"
/*
==============================
I N T E R P O L . c
==============================
*/
#define INTK(K, F1, F2) \
	((F1) + (K)*((F2) - (F1)))

typedef struct {
	sreal_t arg, min, max;
} Scale;
typedef struct {
	int* description_file;				/*	Описание файла							 */
	int length_description_file;		/*	Длинна каждой строки в описании файла	 */
} FileDesc;
typedef struct {
	int* description_argument;			/*	Описание [i] аргумента					 */
	int length_description_argument;	/*	Длинна строки в описании [i] аргумента	 */
} ArgumentDesc;
typedef struct {
	int* name_argument;					/*	Имя [i] аргумента						 */
	int length_name_argument;			/*	Длинна имение [i] аргумент				 */
} ArgumentName;
typedef struct {
	int* description_table;				/*	Описание таблицы						 */
	int length_description_table;		/*	Длинна каждой строки в описании таблицы	 */
} DataDesc;
typedef struct {
	sreal_t *points;			/* Данные для интерполяции */
	unsigned amount;			/* Количество точек данных */
} Data;
typedef struct {
	Scale **scales;			/* Шкалы аргументов */
	int* len;				/* Длины шкал аргументов */
	unsigned nscales;		/* Число шкал */
} Scales;

/* БД для линейной интерполяции (ЛИ) */
/*!*****************************************************************************
	@brief
	@param
	@date 20xx/xx/xx
*******************************************************************************/
//extern unsigned ninterpol;
typedef struct {
    int users;		/* Количество пользователей данной БД */
	wchar* path;	/* Путь к файлу */
	bool is_free;	/* Признак, что данные были удалены после закрытия интерполятора и данная БД может использоваться для вновь открытых файлов */
	Scale **scales;			/* Шкалы аргументов */
	int* len;
	unsigned nscales;		/* Число шкал */
	Data	data;
	FileDesc filedesc;
    ArgumentDesc* argdesc;
	ArgumentName* argname;
	DataDesc datadesc; 
	bool format;
	/**********************/
} Interpol;

/*Getters and setters*/
/*!*****************************************************************************
	@brief Функция установки количество аргументом, с нее программа понимает, что будет происходить ручной ввод данных.
	@param am - количество аргументов.
	@date 2024/03/05
*******************************************************************************/
const int set_amount_args(const int  am);
/*!*****************************************************************************
	@brief Функция принимает данные об аргументе. 
	@param pos - его позиция
	@param arg_arr - значения аргумента (шкалы)
	@param size - размер входящего массива
	@date 2024/03/05
*******************************************************************************/
void set_scale(int const pos, sreal_t const* arg_arr, unsigned const size);
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
void set_data(sreal_t const* data, unsigned const size_k);
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
void add_data(sreal_t const* data, unsigned const size_k);
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
void set_wstr_data(wchar const* str);
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
void add_wstr_data(wchar const* str);
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/

void set_desc_file(const wchar* opis);
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
void set_name_arg(int key, const wchar* name);
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
void set_desc_arg(int key, const wchar* name);
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
void set_desc_table(const wchar* opis);
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
Scale* get_scales(int key);
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
int get_len_of_arg(int key);
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
int get_amount_of_args();

/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
Data get_data();
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
const wchar*  get_descriptionFile();
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
const wchar*  get_descriptionArgument(int key);
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
const wchar*  get_nameArgument(int key);
/*!*****************************************************************************
	@brief
	@param
	@date 2024/03/05
*******************************************************************************/
const wchar*  get_descriptionTable();
/*DEBUG*/
#ifdef DEBUG
void displayDisriptionOfData();
void displayDisriptionOfTable();
void displayDisriptionOfArguments();
void displayScales();
void displayData();
void printInter();
#endif
/**/
/*!*****************************************************************************
	@brief
	@param
	@date 20xx/xx/xx
*******************************************************************************/
size_t size(Interpol*);	/* Возвращает размер объекта при записи, в байтах */
/*!*****************************************************************************
	@brief
	@param
	@date 20xx/xx/xx
*******************************************************************************/
size_t dumpb(unsigned const i, wchar const* fname);	/* Сохранение данных для интерполяции в бинарном формате */
/*!*****************************************************************************
	@brief
	@param
	@date 20xx/xx/xx
*******************************************************************************/
size_t dumpt(unsigned const i, wchar const* fname);	/* Запись данных в файл в текстовом формате */

/*!*****************************************************************************
	@brief 
	@param 
	@date 20xx/xx/xx
*******************************************************************************/
sreal_t interpolate(int i, int n, sreal_t const* arg);
/*!*****************************************************************************
	@brief 
	@param 
	@date 20xx/xx/xx
*******************************************************************************/
int mkinterpol(const wchar* path, FormatFile const fileT);
/*!*****************************************************************************
	@brief 
	@param 
	@date 20xx/xx/xx
*******************************************************************************/
void mkfree(unsigned const i);
#endif